When would you want to use a remote repository rather than keeping all your work local?

  I can think of two cases:
   1. When you are working on a project from multiple devices, for example the office PC, the home PC, 
    and a laptop while travelling. Having a central repository "in the cloud" will massively help with
    syncing the work.
   2. When multiple people are working on the same project. Unless they also share the project computer,
    a centralized repository is crucial to organize the different contributions.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date 
with your remote repository?

	We might want to start a project that is based on a remote source, but will then evolve separatedly.
	Or people might be working on the same files you are, and with automatic pulling conflicts might occur.
	In general, it's about having more control on how you organize the project.
	
Describe the differences between forks, clones, and branches. When would you use one instead of another?

	Branches are used within a repository to make changes separatedly from the main "timeline". 
	They are usually made to test out features or patches.
	Clones are copies of an entire repository(and all its branches). They are usually made to obtain 
	a local copy of a remote repository, but could be used to copy a local repository too, for example
	to add another level of backup redundancy.
	Forks are, in essence, clones, but happen purely remotely. It's a feature of GitHub, allowing
	people to create their own copy of a project without modifying anything from the original.
	
What is the benefit of having a copy of the last known state of the remote stored locally?

	The main benefit is having the remote state available as a branch in the repository, which
	allows for the easy use of diff and log to examine the differences with your local state.
	It's also the only way to do it if you plan to go offline in the forest like Caroline while 
	exploring those differences ;)
	
How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

	Assuming no other kind of version control used, and a physical separation, we'd probably 
	be stuck exchanging emails and snippets of the changes that need to be manually applied to
	local code. It would certainly be harder without the automation that Git provides.
	
When would you want to make changes in a separate branch rather than directly in master? 
What benefits does each approach have?

	Making changes directly to master is certainly quicker and more straighforward. That said,
	in a large project it can quickly create a mess of unrelated commits, not to mention that
	it makes it harder to have a stable state that can be shown to newcomers. Having different
	branches allows for more organized workflows.